package Assignment2;

import java.util.ArrayList;
/**
 * This class represents a table
 * it has an array list of customer, a size that defines how many customers can sit at a table
 * and a table number that identifies the table
 * it also uses some method from the Customer class to find things like total bill value and get the order
 * description in a bill
 *
 * @autor Shreya Sharma - B00891805
 */
public class Table {

    private ArrayList<Customer> seatedCustomer;
    private int size;
    private int tableNumber;

    /**
     * This is a constructor to build Table object with size and number
     * @param size the max number of people that can sit at a table
     * @param number the table number that identifies the table
     */
    public Table(int size, int number)
    {
        this.size = size;
        tableNumber = number;
        seatedCustomer = new ArrayList<Customer>();
    }

    /**
     * This method adds(seats) a customer to the list of customers if the table is empty and if the customer is
     * not already seated and then returns true. if not, it returns false
     * @param newCustomer the customer to be seated
     * @return true if the customer is added and false if customer is not added
     */
    public boolean seatCustomer(Customer newCustomer)
    {
        boolean isSeated = false;
        //if the names of the new customer match to one of the customers seated at the table, isSeated would be "true"
        for(int j = 0; j<seatedCustomer.size();j++)
        {
            isSeated = (newCustomer.getName()).equals(seatedCustomer.get(j).getName());
        }
        /*
         * if the table is full(number of people seating >= size of the table) or the person is already seated(isSeated
         * = true) then return false(didn't add the customer
         */
        if (seatedCustomer.size()>=size || isSeated )
        {
            return false;
        }
        //add the customer to list
        seatedCustomer.add(newCustomer);
        return true;
    }

    /**
     * This method adds(seats) a list of customer to the list of customers if the table is empty and if the customers are
     * not already seated and then returns true. if not, it returns false
     * @param customers the array list of customers to be seated
     * @return true if the customers are added and false if customers are not added
     */
    public boolean seatCustomer(ArrayList<Customer> customers)
    {
        /*
         * if the number of the customers already seated plus the new customer is greater than the size of the table
         * return false(don't add any)
         */
        if(customers.size()+ seatedCustomer.size() > size)
        {
            return false;
        }
        //add all the customers that are not seated, seat them at the table(used the previous method)
        for(int i = 0; i < customers.size(); i++)
        {
            seatCustomer(customers.get(i));
        }
        return true;
    }

    /**
     * This method finds the customer in the list of customers using the customer name
     * @param name the name of the customer to be found
     * @return the customer if the customer is found, and null if customer is not found
     */
    public Customer findCustomerByName(String name)
    {
        //if any of the customers seated match(same name) then return that
        for(int i = 0; i < seatedCustomer.size(); i++)
        {
            if (seatedCustomer.get(i).getName().equals(name)) {
                return seatedCustomer.get(i);
            }
        }
        return null;
    }

    /**
     * This method generates a bill depending on the parameter value, if true, it will create a single bill
     * where customers split the cost using createSplitBill method, if false, creates individualized bill using the
     * method createIndividualizedBill
     * @param generateSingleBill a boolean value used to determine which type of bill to create
     * @return the bill(String) generated by one of the two private methods createSplitBill and createIndividualizedBill
     */
    public String generateBill(boolean generateSingleBill)
    {
        if(generateSingleBill)
        {
            return createSplitBill();
        }
        return createIndividualizedBill();
    }

    /**
     * This method calculates and returns the total revenue on that table by adding all the prices of all the orders
     * by all customers
     * @return the total revenue(double)
     */
    public double getTotalTableRevenue()
    {
        //create table revenue using the getOrderTotalValue() method from the customer class for all customers and then sum them

        double total = 0;
        for(int i = 0; i < seatedCustomer.size(); i++)
        {
            total += seatedCustomer.get(i).getOrderTotalValue();
        }
        return total;
    }


    private String createSplitBill()
    {
        String bill = "Table: " + tableNumber + "\n";

        //the order description of all the customers using getOrderDescription method of Customer class

        for(int i = 0; i < seatedCustomer.size(); i++)
        {
            //only if there were any dishes on the customer's order then add the description
            if(!(seatedCustomer.get(i).getOrderDescription().equals("")))
            {
                bill += seatedCustomer.get(i).getOrderDescription() + "\n";
            }
        }

        //the total cost of all the customer's orders together using the getTotalRevenue method from this class

        double total = getTotalTableRevenue();

        //splits the cost

        double split = total / seatedCustomer.size();
        bill += String.format("Total: %.2f\nSplit: %.2f", total, split);

        return bill;
    }
    private String createIndividualizedBill()
    {
        //similar to above method
        String bill = "";
        for(int i = 0; i < seatedCustomer.size(); i++)
        {
            bill += "Table: " + tableNumber + "\n";
            bill += "Customer " + seatedCustomer.get(i).getName() + "\n";

            //only if there were any dishes on the customer's order, then add the description
            if(!(seatedCustomer.get(i).getOrderDescription().equals("")))
            {
                bill += seatedCustomer.get(i).getOrderDescription() + "\n";
            }
            bill += String.format("Total: %.2f\n", seatedCustomer.get(i).getOrderTotalValue());
        }
        return bill;
    }

}
